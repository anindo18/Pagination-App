{"version":3,"sources":["Components/Posts.js","Components/Pagination.js","Components/NavigateNext.js","Components/NavigatePrevious.js","App.js","reportWebVitals.js","index.js"],"names":["Posts","posts","loading","useState","className","map","post","id","title","Pagination","postsPerPage","totalPosts","paginate","PageNumbers","i","Math","ceil","push","page","onClick","href","NavigateNext","currentPage","indexOfLastPost","disabled","NavigatePrevious","indexOfFirstPost","App","setPosts","setLoading","setCurrentPage","setPostsPerPage","useEffect","fetchPosts","a","axios","get","res","data","currentPosts","slice","number","type","contentEditable","size","event","target","value","length","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.035c7645.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst Posts = ({ posts, loading }) => {\r\n  const [count, setCount] = useState(1);\r\n  const returnVal = () => {\r\n    setCount({ count } + 1);\r\n    return { count };\r\n  };\r\n  if (loading) {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <ul className=\"list-group mb-4\">\r\n        {posts.map((post) => (\r\n          <li key={post.id} className=\"list-group-item\">\r\n            {post.id}. {post.title}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n","import React from \"react\";\r\n\r\nconst Pagination = ({ postsPerPage, totalPosts, paginate }) => {\r\n  const PageNumbers = [];\r\n\r\n  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\r\n    PageNumbers.push(i);\r\n  }\r\n  // [1,2,3,4,5,6,7,8,9,10]\r\n  return (\r\n    <div>\r\n      <ul className=\"pagination\">\r\n        {PageNumbers.map((page) => (\r\n          <li key={page} className=\"page-item\">\r\n            <a onClick={() => paginate(page)} href=\"!#\" className=\"page-link\">\r\n              {page}\r\n            </a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import react from \"react\";\r\n\r\nconst NavigateNext = ({\r\n  currentPage,\r\n  indexOfLastPost,\r\n  totalPosts,\r\n  paginate,\r\n}) => {\r\n  //console.log(\"inside NavigateNext\");\r\n  //console.log(\"outside last page \" + lastPage);\r\n  if (indexOfLastPost === totalPosts) {\r\n    //console.log(\"inside last page \" + lastPage);\r\n    return (\r\n      <span className=\"m-4\">\r\n        <button\r\n          id=\"nextbtn\"\r\n          className=\"btn btn-primary nav-btn\"\r\n          disabled=\"true\"\r\n        >\r\n          {\">\"}\r\n        </button>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span className=\"m-4\">\r\n      <button\r\n        id=\"nextbtn\"\r\n        className=\"btn btn-primary nav-btn\"\r\n        onClick={() => paginate(currentPage + 1)}\r\n      >\r\n        {\">\"}\r\n      </button>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default NavigateNext;\r\n","import react from \"react\";\r\n\r\nconst NavigatePrevious = ({ currentPage, indexOfFirstPost, paginate }) => {\r\n  if (indexOfFirstPost === 0) {\r\n    return (\r\n      <span className=\"m-4\">\r\n        <button\r\n          id=\"nextbtn\"\r\n          className=\"btn btn-primary nav-btn\"\r\n          disabled=\"true\"\r\n        >\r\n          {\"<\"}\r\n        </button>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <span className=\"m-4\">\r\n      <button\r\n        id=\"nextbtn\"\r\n        className=\"btn btn-primary nav-btn\"\r\n        onClick={() => paginate(currentPage - 1)}\r\n      >\r\n        {\"<\"}\r\n      </button>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default NavigatePrevious;\r\n","import react, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Posts from \"./Components/Posts\";\nimport Pagination from \"./Components/Pagination\";\nimport \"./App.css\";\nimport { render } from \"@testing-library/react\";\nimport NavigateNext from \"./Components/NavigateNext\";\nimport NavigatePrevious from \"./Components/NavigatePrevious\";\nimport Navigate from \"./Components/Navigate\";\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage, setPostsPerPage] = useState(5);\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      setLoading(true);\n      const res = await axios.get(\"https://jsonplaceholder.typicode.com/posts\");\n      setPosts(res.data);\n      setLoading(false);\n    };\n    setCurrentPage(1);\n    fetchPosts();\n  }, []);\n\n  // get current posts:\n  const indexOfLastPost = currentPage * postsPerPage; // 50\n  const indexOfFirstPost = indexOfLastPost - postsPerPage; // 50 - 10 =40\n  const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n\n  // change posts per page\n  const changePostsPerPage = (event) => {\n    if (event.target.value == \"\") {\n      setPostsPerPage(5);\n    } else {\n      setPostsPerPage(event.target.value);\n    }\n  };\n\n  const changePageOnInput = (event) => {\n    //if (event.target.value == \"\") {\n    //  setCurrentPage(2);\n    //} else {\n    setCurrentPage(event.target.value);\n    //}\n  };\n\n  const paginate = (number) => {\n    setCurrentPage(number);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"text-primary mb-3\">My App</h1>\n      <Posts posts={currentPosts} loading={loading} />\n      No of Posts per page:{\" \"}\n      <input\n        id=\"postsPerPage\"\n        type=\"text\"\n        contentEditable=\"true\"\n        className=\"mb-5\"\n        size=\"2\"\n        className=\"mr-4 mb-4\"\n        Value={postsPerPage}\n        //onChange={(event) => setPostsPerPage(event.target.value)}\n        onChange={changePostsPerPage}\n      ></input>\n      <Pagination\n        postsPerPage={postsPerPage}\n        totalPosts={posts.length}\n        paginate={paginate}\n      />\n      <NavigatePrevious\n        currentPage={currentPage}\n        indexOfFirstPost={indexOfFirstPost}\n        paginate={paginate}\n      />\n      <input\n        type=\"text\"\n        value={currentPage}\n        size=\"1\"\n        contentEditable=\"true\"\n        onChange={changePageOnInput}\n      ></input>\n      <NavigateNext\n        currentPage={currentPage}\n        indexOfLastPost={indexOfLastPost}\n        totalPosts={posts.length}\n        paginate={paginate}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}